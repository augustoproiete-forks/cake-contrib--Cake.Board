# Copyright (c) Nicola Biancolini, 2019. All rights reserved.
# Licensed under the MIT license. See the LICENSE file in the project root for full license information.

# top-most .editorconfig file
root = true 

# All files 
[*]
insert_final_newline = true
indent_style = space
charset = utf-8
indent_size = 2

# C# files
[*.{cs,cake}] 
indent_size = 4

# new line preferences
csharp_new_line_before_open_brace = all 
csharp_new_line_before_else = true 
csharp_new_line_before_catch = true 
csharp_new_line_before_finally = true 
csharp_new_line_before_members_in_object_initializers = true 
csharp_new_line_before_members_in_anonymous_types = true 
csharp_new_line_between_query_expression_clauses = true 

# indentation preferences 
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# use this. preferences
dotnet_style_qualification_for_field = true:error
dotnet_style_qualification_for_property = true:error
dotnet_style_qualification_for_method = true:error
dotnet_style_qualification_for_event = true:error

# only use var when it's obvious what the variable type is
csharp_style_var_for_built_in_types = false:error
csharp_style_var_when_type_is_apparent = false:suggestion
csharp_style_var_elsewhere = false:error

# language keywords vs BCL types preferences 
dotnet_style_predefined_type_for_locals_parameters_members = true:warning 
dotnet_style_predefined_type_for_member_access = true:warning 

# name all constant fields using ALL_UPPER
dotnet_naming_rule.constant_fields_should_be_all_upper.severity = error
dotnet_naming_rule.constant_fields_should_be_all_upper.symbols  = constant_fields
dotnet_naming_rule.constant_fields_should_be_all_upper.style    = all_upper_style

dotnet_naming_symbols.constant_fields.applicable_kinds   = field
dotnet_naming_symbols.constant_fields.required_modifiers = const

dotnet_naming_style.all_upper_style.capitalization = all_upper
dotnet_naming_style.all_upper_style.word_separator = _

# internal and private fields should be _camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = error
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style    = camel_case_underscore_style

dotnet_naming_symbols.private_internal_fields.applicable_kinds           = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private,internal

dotnet_naming_style.camel_case_underscore_style.capitalization  = camel_case 
dotnet_naming_style.camel_case_underscore_style.required_prefix = _

# fields, parameters, locals and local functions should be camelCase
dotnet_naming_rule.local_fields_should_be_camel_case.severity = error
dotnet_naming_rule.local_fields_should_be_camel_case.symbols  = local_fields
dotnet_naming_rule.local_fields_should_be_camel_case.style    = camel_case_style

dotnet_naming_symbols.local_fields.applicable_kinds           = parameter,local,local_function
dotnet_naming_symbols.local_fields.applicable_accessibilities = private

dotnet_naming_style.camel_case_style.capitalization = camel_case 

# use PascalCase for all other  
dotnet_naming_rule.pascal_case_for_all_other.severity = error 
dotnet_naming_rule.pascal_case_for_all_other.symbols  = public_all_other 
dotnet_naming_rule.pascal_case_for_all_other.style    = pascal_case_style 

dotnet_naming_symbols.public_all_other.applicable_kinds           = namespace,class,struct,interface,enum,property,method,field,event,delegate
dotnet_naming_symbols.public_all_other.applicable_accessibilities = * 

dotnet_naming_style.pascal_case_style.capitalization = pascal_case 

# organize usings 
dotnet_sort_system_directives_first = true 

# modifier preferences 
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning

# wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false

# expression-level preferences 
dotnet_style_object_initializer = true:warning 
dotnet_style_collection_initializer = true:warning 
dotnet_style_explicit_tuple_names = true:warning 
dotnet_style_null_propagation = true:error 
dotnet_style_coalesce_expression = true:error 
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning 
dotnet_prefer_inferred_tuple_names = true:warning 
dotnet_prefer_inferred_anonymous_type_member_names = true:warning 
dotnet_style_prefer_auto_properties = true:warning 
dotnet_style_prefer_conditional_expression_over_assignment = true:error 
dotnet_style_prefer_conditional_expression_over_return = true:error 

# expression-bodied members 
csharp_style_expression_bodied_methods = when_on_single_line:error 
csharp_style_expression_bodied_constructors = when_on_single_line:error 
csharp_style_expression_bodied_operators = when_on_single_line:error 
csharp_style_expression_bodied_properties = when_on_single_line:error 
csharp_style_expression_bodied_indexers = when_on_single_line:error 
csharp_style_expression_bodied_accessors = when_on_single_line:error 

# pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_inlined_variable_declaration = true:error

# null-checking preferences 
csharp_style_throw_expression = true:error 
csharp_style_conditional_delegate_call = true:error 

# space preferences
csharp_space_after_cast = false:warning
csharp_space_after_colon_in_inheritance_clause = true:warning
csharp_space_after_comma = true:warning
csharp_space_after_dot = false:warning
csharp_space_after_keywords_in_control_flow_statements = true:warning
csharp_space_after_semicolon_in_for_statement = true:warning
csharp_space_around_binary_operators = before_and_after:warning
csharp_space_around_declaration_statements = do_not_ignore:warning
csharp_space_before_colon_in_inheritance_clause = true:warning
csharp_space_before_comma = false:warning
csharp_space_before_dot = false:warning
csharp_space_before_open_square_brackets = false:warning
csharp_space_before_semicolon_in_for_statement = false:warning
csharp_space_between_empty_square_brackets = false:warning
csharp_space_between_method_call_empty_parameter_list_parentheses = false:warning
csharp_space_between_method_call_name_and_opening_parenthesis = false:warning
csharp_space_between_method_call_parameter_list_parentheses = false:warning
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false:warning
csharp_space_between_method_declaration_name_and_open_parenthesis = false:warning
csharp_space_between_method_declaration_parameter_list_parentheses = false:warning
csharp_space_between_parentheses = false:warning
csharp_space_between_square_brackets = false:warning
